{"version":3,"sources":["node_modules/ez-read/ez-read.js","node_modules/classic-deck/deck-init.js","node_modules/classic-deck/index.js","src/model/model.js","src/display-util.js","src/update-user-display.js","src/model/user.js","src/update-comp-display.js","src/model/comp.js","src/take-out-sets.js","src/set-deck-display.js","src/correct-user-guess.js","src/init-game.js","src/main.js"],"names":["deck","Deck","cardDeck","document","querySelector","cardImages","require","choiceButtons","choiceButtonContainer","compCards","compMessage","compScoreDisplay","deckRemaining","displayHand","newGameButton","setsFound","userResponse","userScoreDisplay","clearCards","cardDisplay","innerHTML","appendNewCard","imgSrc","newCard","createElement","setAttribute","style","padding","appendChild","getRankWord","cardRank","updateUserDisplay","hand","forEach","card","buildSrc","rankWord","suitWord","getSuitWord","cardSuit","user","score","updateScore","updateUserScore","updateCards","updateCompDisplay","_","back","comp","guessOptions","updatedOptions","guess","message","updateScoreDisplay","resetGuessOptions","resetGuessOpts","takeOutSets","player","ranks","map","setFoundRank","findSets","filter","rank","currentSets","newSetsFound","uniqueRanks","count","i","length","j","setDeckDisplay","setImage","height","width","correctUserGuess","userGuess","cardsFound","makeCardMessage","concat","sort","numToWord","num","dealCards","reset","deal","setInitialDisplay","classList","add","remove","runGame","processUserGuess","event","getUserGuess","target","id","newCompHand","userGoesFish","setTimeout","runCompTurn","eventId","toUpperCase","gameOver","compGoesFish","processResponse","userHasCard","item","buttonPressed","correctCompGuess","console","log","newUserHand","addEventListener"],"mappings":";AAAA,aAEA,MAAA,EAAA,CACA,IAAA,SAAA,EAAA,GACA,MAAA,mBAAA,GAAA,MAAA,QAAA,GACA,EAAA,KAAA,oDAGA,aAAA,MAKA,QAAA,SAAA,GAGA,OAFA,EAAA,OAAA,CAAA,EAAA,IAAA,EAAA,EAAA,GACA,EAAA,QAIA,KAAA,YAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,GAAA,EAAA,GAAA,EAAA,CACA,GAAA,IAAA,EAAA,OAAA,GAAA,mBAAA,EAAA,GACA,OAAA,EAAA,KAEA,GAAA,IAAA,EAAA,OAAA,EACA,OAAA,EAAA,GAEA,GAAA,EAAA,IAAA,mBAAA,EAAA,EAAA,GACA,OAAA,EAAA,EAAA,KAEA,GAAA,EAAA,GACA,OAAA,EAAA,EAAA,KAMA,MAAA,SAAA,GAGA,MAFA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,SAAA,IAIA,KAAA,SAAA,EAAA,GACA,GAAA,iBAAA,GAAA,iBAAA,IAAA,MAAA,QAAA,GAIA,MAAA,IAAA,qEAAA,aAAA,MAHA,OAAA,EAAA,MAAA,IAOA,MAAA,SAAA,GACA,MAAA,EAAA,IAAA,EAAA,OACA,GAAA,iBAAA,GAAA,MAAA,QAAA,GACA,OAAA,EAEA,GAAA,iBAAA,EAAA,CACA,IAAA,QAAA,EACA,GAAA,EAAA,eAAA,MACA,OAAA,EAGA,OAAA,EAGA,MAAA,IAAA,mEAAA,MAIA,KAAA,SAAA,GACA,GAAA,iBAAA,EACA,OAAA,EAAA,GAAA,EAEA,MAAA,MAAA,QAAA,GACA,IAAA,UAAA,qCAGA,IAAA,gDAAA,MAIA,WAAA,YAAA,GACA,IAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,IAAA,MAAA,QAAA,EAAA,IAAA,CACA,EAAA,KAAA,EAAA,IACA,SAEA,IAAA,EAAA,EAAA,GAAA,KAAA,EAAA,GACA,EAAA,KAAA,GAGA,OADA,EAAA,QAIA,OAAA,SAAA,GACA,GAAA,OAAA,EACA,MAAA,IAAA,UAAA,yDAEA,GAAA,iBAAA,GAAA,MAAA,QAAA,GAYA,OAXA,OAAA,OAAA,GAEA,OAAA,oBAAA,GAAA,QAAA,KACA,EAAA,eAAA,IACA,OAAA,EAAA,IACA,iBAAA,EAAA,IAAA,mBAAA,EAAA,IACA,OAAA,SAAA,EAAA,KACA,OAAA,OAAA,EAAA,MAIA,EAGA,MAAA,IAAA,2EAAA,MAIA,OAAA,SAAA,GACA,GAAA,iBAAA,EACA,OAAA,OAAA,SAAA,GAGA,MAAA,IAAA,wDAAA,MAIA,KAAA,SAAA,GACA,GAAA,iBAAA,IAAA,MAAA,QAAA,IAAA,KAAA,GAAA,IAAA,GAGA,KAAA,iBAAA,IAAA,MAAA,QAAA,IAAA,KAAA,GAAA,IAAA,GAIA,IAAA,wDAAA,KAHA,IAAA,MAAA,+DAHA,OAAA,EAAA,IAUA,OAAA,SAAA,EAAA,GACA,OAAA,GAAA,mBAAA,EACA,IACA,EACA,EAEA,MAIA,WAAA,SAAA,EAAA,EAAA,GACA,OAAA,GAAA,mBAAA,EACA,IACA,EACA,EACA,GAAA,mBAAA,EAGA,EAFA,KAMA,KAAA,SAAA,GACA,GAAA,iBAAA,IAAA,MAAA,QAAA,IAAA,KAAA,GAAA,IAAA,GAGA,KAAA,iBAAA,IAAA,MAAA,QAAA,IAAA,KAAA,GAAA,IAAA,GAIA,IAAA,wDAAA,KAHA,IAAA,MAAA,+DAHA,OAAA,EAAA,MAAA,EAAA,EAAA,OAAA,IAUA,MAAA,SAAA,GAEA,OADA,aAAA,SAAA,IAIA,QAAA,SAAA,GACA,OAAA,OAAA,UAAA,IAGA,GAAA,SAAA,GACA,OAAA,GAGA,KAAA,SAAA,GACA,GAAA,iBAAA,IAAA,MAAA,QAAA,IAAA,KAAA,GAAA,IAAA,GAGA,KAAA,iBAAA,IAAA,MAAA,QAAA,IAAA,KAAA,GAAA,IAAA,GAIA,IAAA,wDAAA,KAHA,IAAA,MAAA,+DAHA,OAAA,EAAA,EAAA,OAAA,IAUA,IAAA,SAAA,GAEA,OADA,MAAA,GAIA,IAAA,SAAA,GACA,GAAA,kBAAA,EACA,OAAA,EAGA,MAAA,IAAA,gDAAA,MAIA,OAAA,SAAA,GAEA,MADA,iBAAA,IAAA,MAAA,IAIA,IAAA,SAAA,GACA,GAAA,iBAAA,EACA,OAAA,EAAA,GAAA,EAEA,MAAA,MAAA,QAAA,GACA,IAAA,UAAA,qCAGA,IAAA,gDAAA,MAIA,WAAA,SAAA,GACA,GAAA,iBAAA,EAAA,CAEA,OADA,EAAA,QAAA,SAAA,IAGA,MAAA,MAAA,QAAA,GACA,IAAA,UAAA,qCAGA,IAAA,4DAAA,MAIA,YAAA,SAAA,GACA,GAAA,iBAAA,EAAA,CAEA,OADA,EAAA,QAAA,aAAA,IAGA,MAAA,MAAA,QAAA,GACA,IAAA,UAAA,qCAGA,IAAA,6DAAA,MAIA,MAAA,SAAA,GACA,QAAA,IAAA,IAGA,UAAA,SAAA,EAAA,GACA,GAAA,iBAAA,GAAA,iBAAA,EACA,OAAA,KAAA,MAAA,KAAA,UAAA,EAAA,EAAA,GAAA,GAGA,MAAA,IAAA,0DAAA,aAAA,OAIA,aAAA,SAAA,GACA,GAAA,MAAA,QAAA,GAAA,CAEA,OAAA,EADA,KAAA,MAAA,KAAA,SAAA,EAAA,SAIA,MAAA,IAAA,8CAAA,MAIA,MAAA,SAAA,EAAA,GACA,GAAA,iBAAA,GAAA,iBAAA,EACA,MAAA,IAAA,0DAAA,aAAA,MAGA,OAAA,EAAA,QAAA,IAAA,EAEA,EAAA,EADA,EAAA,QAIA,IAAA,GACA,EAAA,EAEA,EADA,EAAA,EACA,IAGA,GAAA,EACA,EAAA,EAAA,GAGA,GAAA,EACA,EAAA,EAAA,GAGA,YAIA,QAAA,SAAA,GACA,GAAA,MAAA,QAAA,GACA,OAAA,EAAA,UAEA,GAAA,iBAAA,EAAA,CAEA,OADA,EAAA,MAAA,IAAA,UAAA,KAAA,IAIA,MAAA,IAAA,wDAAA,MAKA,KAAA,SAAA,GACA,GAAA,OAAA,EACA,MAAA,IAAA,UAAA,uDAEA,GAAA,iBAAA,GAAA,MAAA,QAAA,GACA,OAAA,OAAA,KAAA,GAGA,MAAA,IAAA,yEAAA,MAIA,QAAA,SAAA,GACA,GAAA,MAAA,QAAA,GAAA,CACA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,IAAA,CACA,IAAA,EAAA,KAAA,MAAA,KAAA,UAAA,EAAA,KACA,EAAA,GAAA,EAAA,IAAA,CAAA,EAAA,GAAA,EAAA,IAEA,OAAA,EAGA,MAAA,IAAA,8CAAA,MAIA,WAAA,SAAA,EAAA,GACA,GAAA,iBAAA,GAAA,MAAA,QAAA,GAAA,CACA,IAAA,EAAA,GACA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IACA,EAAA,KAAA,EAAA,EAAA,IACA,EAAA,GAAA,GACA,EAAA,KAAA,GACA,EAAA,IAEA,IAAA,EAAA,QACA,EAAA,KAAA,GAGA,OAAA,EAEA,OAAA,MAAA,QAAA,GAAA,MAAA,QAAA,GACA,sDAEA,MAAA,QAAA,GAAA,MAAA,QAAA,kDACA,2DAGA,aAAA,OAIA,IAAA,YAAA,GAMA,OALA,EAAA,OAAA,CAAA,EAAA,IAAA,EAAA,OAAA,GAAA,IAEA,IAAA,GAAA,OAAA,IAEA,OAAA,CAAA,EAAA,IAAA,EAAA,IAIA,KAAA,SAAA,GACA,GAAA,iBAAA,IAAA,MAAA,QAAA,IAAA,KAAA,GAAA,IAAA,GAGA,KAAA,iBAAA,IAAA,MAAA,QAAA,IAAA,KAAA,GAAA,IAAA,GAIA,IAAA,wDAAA,KAHA,IAAA,MAAA,+DAHA,OAAA,EAAA,MAAA,EAAA,EAAA,SAUA,KAAA,SAAA,EAAA,GAEA,OADA,EAAA,MAAA,EAAA,IAIA,OAAA,SAAA,GACA,GAAA,MAAA,QAAA,GAAA,CACA,IAAA,EAAA,GACA,IAAA,IAAA,KAAA,GACA,IAAA,EAAA,QAAA,IACA,EAAA,KAAA,GAGA,OAAA,EAGA,MAAA,IAAA,uCAAA,OAUA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,GAAA,EAAA,IACA,EAAA,KAAA,GAEA,OAAA,EAGA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,GAAA,EAAA,IACA,EAAA,KAAA,GAEA,OAAA,EAKA,OAAA,QAAA;;ACvbA,SAAA,EAAA,EAAA,GAEA,MAAA,EAAA,GAUA,OARA,EAAA,QAAA,IAEA,EAAA,QAAA,IAEA,EAAA,QAAA,IAAA,SAIA,EAGA,OAAA,QAAA;;ACfA,MAAA,OAAA,EAAA,KAAA,EAAA,KAAA,EAAA,QAAA,GAAA,QAAA,WACA,EAAA,QAAA,eAGA,MAAA,EACA,cAEA,KAAA,MAAA,EAAA,CAAA,IAAA,IAAA,IAAA,MACA,KAAA,MAAA,EAAA,CAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,IAAA,IAAA,IAAA,MACA,KAAA,KAAA,EAAA,EAAA,KAAA,MAAA,KAAA,QAGA,OAEA,QAAA,IAAA,KAAA,MAGA,cAEA,KAAA,KAAA,EAAA,KAAA,MAGA,QAAA,GAEA,KAAA,KAAA,EAAA,EAAA,KAAA,MAGA,KAAA,GAEA,MAAA,EAAA,EAAA,EAAA,KAAA,MAEA,OADA,KAAA,KAAA,EAAA,EAAA,KAAA,MACA,EAGA,QAEA,KAAA,KAAA,EAAA,EAAA,KAAA,MAAA,KAAA,SAKA,OAAA,QAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,QAAA,aAAA,QAAA,UAAA,QAAA,cAAA,QAAA,YAAA,QAAA,cAAA,QAAA,KAAA,QAAA,iBAAA,QAAA,YAAA,QAAA,UAAA,QAAA,sBAAA,QAAA,cAAA,QAAA,WAAA,QAAA,cAAA,EAjBA,IAAA,EAAA,EAAA,QAAA,iBAiBA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAdA,IAAMA,EAAO,IAAIC,EAAJ,QAcb,QAAA,KAAA,EAZA,IAAMC,EAAWC,SAASC,cAAc,cAYxC,QAAA,SAAA,EAXA,IAAMC,EAAaC,QAAQ,mBAW3B,QAAA,WAAA,EAVA,IAAMC,EAAgBJ,SAASC,cAAc,mBAU7C,QAAA,cAAA,EATA,IAAMI,EAAwBL,SAASC,cAAc,4BASrD,QAAA,sBAAA,EARA,IAAMK,EAAYN,SAASC,cAAc,eAQzC,QAAA,UAAA,EAPA,IAAMM,EAAcP,SAASC,cAAc,iBAO3C,QAAA,YAAA,EANA,IAAMO,EAAmBR,SAASC,cAAc,uBAMhD,QAAA,iBAAA,EALA,IAAMQ,EAAgBT,SAASC,cAAc,mBAK7C,QAAA,cAAA,EAJA,IAAMS,EAAcV,SAASC,cAAc,iBAI3C,QAAA,YAAA,EAHA,IAAMU,EAAgBX,SAASC,cAAc,aAG7C,QAAA,cAAA,EAFA,IAAMW,EAAYZ,SAASC,cAAc,eAEzC,QAAA,UAAA,EADA,IAAMY,EAAeb,SAASC,cAAc,kBAC5C,QAAA,aAAA,EAAA,IAAMa,EAAmBd,SAASC,cAAc,uBAAhD,QAAA,iBAAA;;ACgBC,aAjCD,SAASc,EAAWC,GAEhBA,EAAYC,UAAY,GAK5B,SAASC,EAAcC,EAAQH,GAErBI,IAAAA,EAAUpB,SAASqB,cAAc,OACvCD,EAAQE,aAAa,MAAOH,GAC5BC,EAAQE,aAAa,SAAU,SAC/BF,EAAQE,aAAa,QAAS,SAC9BF,EAAQG,MAAMC,QAAU,oBACxBR,EAAYS,YAAYL,GAI5B,SAASM,EAAYC,GAEVA,OAAAA,GAEE,IAAA,IACM,MAAA,OACN,IAAA,IACM,MAAA,QACN,IAAA,IACM,MAAA,OACN,IAAA,IACM,MAAA,MACX,QACWA,OAAAA,GAElB,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EAAA,QAAA,cAAA,EAAA,QAAA,YAAA;;ACacC,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA9Cf,IAAA,EAAA,QAAA,WACA,EAAA,QAAA,iBACA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,iBA2CeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAxCf,SAASA,KAEMlB,EAAAA,EAAAA,YAAAA,EAAX,aACKmB,EAAAA,QAAAA,KAAKC,QAAQ,SAAAC,GAERZ,IAAAA,EAASa,EAASD,IACVZ,EAAAA,EAAAA,eAAAA,EAAQT,EAAtB,eAKR,SAASsB,EAASD,GAERJ,IAAAA,GAAW,EAAKI,EAAAA,MAAAA,GAChBE,GAAW,EAAYN,EAAAA,aAAAA,GAEvBO,EAAWC,GADA,EAAKJ,EAAAA,MAAAA,IAGfZ,OADQjB,EAAc+B,WAAAA,GAAAA,OAAAA,EAAeC,QAAAA,OAAAA,IAKhD,SAASC,EAAYC,GAEVA,OAAAA,GAEE,IAAA,IACM,MAAA,SACN,IAAA,IACM,MAAA,SACN,IAAA,IACM,MAAA,WACN,IAAA,IACM,MAAA,QACX,QACW,MAAA,UAKJR,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;AC3BAS,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAnBf,IAAA,EAAA,EAAA,QAAA,2BACA,EAAA,QAAA,WAkBeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAff,IAAMA,EAAO,CACTR,KAAM,GACNS,MAAO,EACPC,YAAaC,EACbC,YAAab,EAAAA,SAKjB,SAASY,IAEYvB,EAAAA,iBAAAA,UAAoBoB,QAAAA,OAAAA,EAAKC,OAI/BD,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACJAK,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAff,IAAA,EAAA,QAAA,iBACA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,iBAaeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAXf,SAASA,KAEMpC,EAAAA,EAAAA,YAAAA,EAAX,WACKuB,EAAAA,QAAAA,KAAKC,QAAQ,SAAAa,GAEJxB,IAAAA,EAASjB,EAAW0C,WAAAA,MACZzB,EAAAA,EAAAA,eAAAA,EAAQb,EAAtB,aAKGoC,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACYAG,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA3Bf,IAAA,EAAA,EAAA,QAAA,2BACA,EAAA,QAAA,WA0BeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAxBf,IAAMA,EAAO,CACTC,aAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,IAAK,IAAK,KAC1DC,eAAgB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,IAAK,IAAK,KAC5DC,MAAO,GACPnB,KAAM,GACNoB,QAAS1C,EALA,YAMTkC,YAAaC,EANJ,QAOTH,YAAaW,EACbC,kBAAmBC,EACnBd,MAAO,GAIX,SAASY,IAEYjC,EAAAA,iBAAAA,UAAyB4B,aAAAA,OAAAA,EAAKP,OAInD,SAASc,IAELP,EAAKC,aAAeD,EAAKE,eAGdF,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACsBAQ,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAjDf,IAAA,EAAA,QAAA,WACA,EAAA,QAAA,iBACA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,iBA8CeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GA3Cf,SAASA,EAAYC,GAEXC,IAAAA,EAAQD,EAAOzB,KAAK2B,IAAI,SAAAzB,GAAQ,OAAA,EAAKA,EAAAA,MAAAA,KAErC0B,EAAeC,GADD,EAAOH,EAAAA,QAAAA,GACgBD,GACvCG,GAAAA,EACJ,CACIH,EAAOzB,KAAOyB,EAAOzB,KAAK8B,OAAO,SAAA5B,GAAQ0B,OAAAA,KAAiB,EAAK1B,EAAAA,MAAAA,KAC1DgB,EAAAA,QAAAA,eAAiBF,EAAKE,QAAAA,eAAeY,OAAO,SAAAC,GAAQA,OAAAA,GAAQH,IACjEH,EAAOb,cACPa,EAAOhB,QACPgB,EAAOf,cACDsB,IAAAA,EAAcjD,EAAUK,UAAAA,UACxB6C,EAAkBD,GAAAA,OAAAA,EAAe,KAAA,QAAA,EAAYJ,EAAAA,aAAAA,GAAnD,OACUxC,EAAAA,UAAAA,UAAY6C,GAK9B,SAASJ,EAASK,EAAaT,GAGtB,IADDU,IAAAA,EAAQ,EACHC,EAAI,EAAGA,EAAIF,EAAYG,OAAQD,IACxC,CACS,IAAA,IAAIE,EAAI,EAAGA,EAAIb,EAAOzB,KAAKqC,OAAQC,IAEhCJ,EAAYE,MAAO,EAAKX,EAAAA,MAAAA,EAAOzB,KAAKsC,KAEpCH,IAGJA,GAAU,IAAVA,EAEOD,OAAAA,EAAYE,GAInBD,EAAQ,GAMLX,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACZAe,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EArCf,IAAA,EAAA,QAAA,iBAGA,SAASA,IAEEvE,OAAAA,EAAKA,KAAAA,KAAKqE,QAER,KAAA,GACDG,EAASnE,EAAW,WAAA,aAAc,QAAS,SAC3C,MACC,KAAA,EACDmE,EAASnE,EAAW,WAAA,eAAgB,QAAS,SAC7C,MACC,KAAA,EACDmE,EAASnE,EAAW,WAAA,eAAgB,QAAS,SAC7C,MACC,KAAA,EACDmE,EAASnE,EAAW,WAAA,eAAgB,QAAS,SAC7C,MACC,KAAA,EACDmE,EAASnE,EAAW,WAAA,eAAgB,QAAS,SAC7C,MACJ,QACI,QAMZ,SAASmE,EAASlD,EAAQmD,EAAQC,GAErBjD,EAAAA,SAAAA,aAAa,MAAOH,GACpBG,EAAAA,SAAAA,aAAa,SAAUgD,GACvBhD,EAAAA,SAAAA,aAAa,QAASiD,GAIpBH,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACQAI,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA7Cf,IAAA,EAAA,QAAA,WACA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,iBA0CeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAvCf,SAASA,EAAiBC,EAAWC,GAG5BzB,EAAAA,QAAAA,QAAQhC,UAAY0D,EAAgBF,EAAWC,GAC/C7C,EAAAA,QAAAA,KAAOQ,EAAKR,QAAAA,KAAK+C,OAAOF,GAAYG,OACpCpC,EAAAA,QAAAA,cACAA,EAAAA,QAAAA,cAIT,SAASkC,EAAgBF,EAAWC,GAE5BzB,IAAAA,EAAoB6B,UAAAA,OAAAA,EAAUJ,EAAWR,QAAW,KAAA,QAAA,EAAYO,EAAAA,aAAAA,GAApE,KAKOxB,OAJmB,IAAtByB,EAAWR,SAEXjB,GAAU,EAAKA,EAAAA,MAAAA,IAEZA,EAIX,SAAS6B,EAAUC,GAERA,OAAAA,GAEE,KAAA,EACM,MAAA,MACN,KAAA,EACM,MAAA,MACN,KAAA,EACM,MAAA,QACN,KAAA,EACM,MAAA,OACX,QACW,MAAA,oBAKJP,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACnBd,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EAAA,QAAA,kBAAA,EA1BD,IAAA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,iBACA,EAAA,QAAA,iBAwBC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GArBD,SAASQ,EAAUnF,GAEfA,EAAKoF,QACApD,EAAAA,QAAAA,KAAOhC,EAAKqF,KAAK,GACjBrD,EAAAA,QAAAA,KAAOhC,EAAKqF,KAAK,GAI1B,SAASC,IAESlE,EAAAA,cAAAA,UAA0CpB,8BAAAA,OAAAA,EAAKA,KAAAA,KAAKqE,QAC7DzB,EAAAA,QAAAA,cACiB2C,EAAAA,sBAAAA,UAAUC,IAAI,cACvBD,EAAAA,aAAAA,UAAUE,OAAO,cAC9BlB,iBACK9B,EAAAA,QAAAA,MAAQ,EACRA,EAAAA,QAAAA,MAAQ,EACRC,EAAAA,QAAAA,cACAA,EAAAA,QAAAA,cACAU,EAAAA,QAAAA,QAAQhC,UAAb,aACUA,EAAAA,UAAAA,UAAV;;ACuJH,aAhLD,IAAA,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,oBACA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,yBACA,EAAA,QAAA,kBACA,EAAA,QAAA,eACA,EAAA,QAAA,iBAwKC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAxJD,SAASsE,KAEK1F,EAAAA,EAAAA,WAAAA,EAAV,OACA,EAAA,EAAA,qBAKJ,SAAS2F,EAAiBC,GAEhBhB,IAAAA,EAAYiB,EAAaD,EAAME,OAAOC,IACtCC,EAAchD,EAAKhB,QAAAA,KAAK8B,OAAO,SAAA5B,GAAQ0C,OAAAA,KAAc,EAAK1C,EAAAA,MAAAA,KAC1D2C,EAAa7B,EAAKhB,QAAAA,KAAK8B,OAAO,SAAA5B,GAAQ0C,OAAAA,KAAc,EAAK1C,EAAAA,MAAAA,KAC1DF,EAAAA,QAAAA,KAAOgE,GACR,EAAMnB,EAAAA,OAAAA,KAAe,EAAM7B,EAAAA,OAAAA,EAAKhB,QAAAA,OAEhCiE,EAAaL,EAAME,OAAOC,KACdvD,EAAAA,EAAAA,SAAAA,EAAZ,SACA0D,WAAW,WACPC,KACD,SAIcvB,EAAAA,EAAAA,SAAAA,EAAWC,IAChBrC,EAAAA,EAAAA,SAAAA,EAAZ,UAMR,SAASqD,EAAaO,GAEdxB,IAAAA,GAAY,EAAKwB,EAAAA,MAAAA,GAOdxB,OANiBA,EAAUP,OAAS,IAGvCO,GAAY,EAAKA,EAAAA,MAAAA,EAAUyB,gBAGxBzB,EAKX,SAASqB,EAAaG,GAEbpE,EAAAA,QAAAA,KAAOQ,EAAKR,QAAAA,KAAK+C,OAAO/E,EAAKqF,KAAAA,KAAK,IAAIL,OAC7B5D,EAAAA,cAAAA,UAA0CpB,8BAAAA,OAAAA,EAAKA,KAAAA,KAAKqE,QAC5CkB,EAAAA,sBAAAA,UAAUE,OAAO,eACnC,EAAMzF,EAAAA,OAAAA,EAAKA,KAAAA,MAEXsG,KAGClD,EAAAA,QAAAA,QAAQhC,UAAkB,MAAA,QAAA,EAAKgF,EAAAA,MAAAA,GAApC,qBACKxD,EAAAA,QAAAA,cACAA,EAAAA,QAAAA,eACL,EAAA,EAAA,YAKJ,SAAS2D,IAEAvE,EAAAA,QAAAA,KAAOgB,EAAKhB,QAAAA,KAAK+C,OAAO/E,EAAKqF,KAAAA,KAAK,IACzBjE,EAAAA,cAAAA,UAA0CpB,8BAAAA,OAAAA,EAAKA,KAAAA,KAAKqE,QACrDkB,EAAAA,aAAAA,UAAUE,OAAO,eAC1B,EAAMzF,EAAAA,OAAAA,EAAKA,KAAAA,MAEXsG,KAGC1D,EAAAA,QAAAA,cACiB2C,EAAAA,sBAAAA,UAAUC,IAAI,cAC/BpC,EAAAA,QAAAA,QAAQhC,UAAb,cACY4B,EAAAA,EAAAA,SAAAA,EAAZ,SACKM,EAAAA,QAAAA,qBACL,EAAA,EAAA,YAIJ,SAASgD,IAEiBf,EAAAA,sBAAAA,UAAUE,OAAO,cAC1BF,EAAAA,aAAAA,UAAUE,OAAO,cAE1BjD,EAAKC,QAAAA,MAAQO,EAAKP,QAAAA,MAEbW,EAAAA,QAAAA,QAAQhC,UAAb,WAEKoB,EAAKC,QAAAA,QAAUO,EAAKP,QAAAA,MAEpBW,EAAAA,QAAAA,QAAQhC,UAAb,YAIKgC,EAAAA,QAAAA,QAAQhC,UAAb,qBAKR,SAASoF,EAAgBZ,GAEfa,IAAAA,GAAc,EAAK,EAAA,KAAA,SAAAC,GAAQ,OAAA,EAAKA,EAAAA,MAAAA,IAAS1D,EAAKG,QAAAA,OAAQX,EAAKR,QAAAA,MAC3D2E,EAAgBf,EAAME,OAAOC,GAC5B,QAAA,GAEEU,KAAAA,GAAiC,QAAlBE,EAChBC,IACA,MACCH,KAAAA,GAAiC,OAAlBE,EACXvD,EAAAA,QAAAA,QAAQhC,UAAb,8CACA,MACC,KAAA,EAAIqF,EAAAA,KAAAA,IAAkC,QAAlBE,EAChBvD,EAAAA,QAAAA,QAAQhC,UAAb,uDACA,MACC,KAAA,EAAIqF,EAAAA,KAAAA,IAAkC,OAAlBE,EACrBJ,IACA,MACJ,QACIM,QAAQC,IAAI,UAOxB,SAASX,IAEAhD,EAAAA,QAAAA,OAAQ,EAAaH,EAAAA,cAAAA,EAAKC,QAAAA,cAC1BG,EAAAA,QAAAA,QAAQhC,UAAyC,6BAAA,QAAA,EAAY4B,EAAAA,aAAAA,EAAKG,QAAAA,OAAvE,MACaoC,EAAAA,aAAAA,UAAUC,IAAI,cAM/B,SAASoB,IAECG,IAAAA,EAAcvE,EAAKR,QAAAA,KAAK8B,OAAO,SAAA5B,GAAQc,OAAAA,EAAKG,QAAAA,QAAS,EAAKjB,EAAAA,MAAAA,KAC1D2C,EAAarC,EAAKR,QAAAA,KAAK8B,OAAO,SAAA5B,GAAQc,OAAAA,EAAKG,QAAAA,QAAS,EAAKjB,EAAAA,MAAAA,KAC1DF,EAAAA,QAAAA,KAAO+E,EACP/E,EAAAA,QAAAA,KAAOgB,EAAKhB,QAAAA,KAAK+C,OAAOF,GACxBjC,EAAAA,QAAAA,cACAA,EAAAA,QAAAA,cACAK,EAAAA,QAAAA,aAAeD,EAAKC,QAAAA,aAAaa,OAAO,SAAAC,GAAQf,OAAAA,EAAKG,QAAAA,QAAUY,KACxDf,EAAAA,EAAAA,SAAAA,EAAZ,SACAkD,WAAW,WAEPC,KACD,MA5JPrF,EAAckG,cAAAA,iBAAiB,QAAStB,GACxCnF,EAAcyG,cAAAA,iBAAiB,QAASrB,GACxC3E,EAAagG,aAAAA,iBAAiB,QAASR","file":"main.bc5aee79.js","sourceRoot":"..","sourcesContent":["'use strict'\r\n\r\nconst ezRead = {\r\n  any: function(callback, array) {\r\n    if (typeof callback === 'function' && Array.isArray(array)) {\r\n      return array.some(callback);\r\n    }\r\n    else {\r\n      return `Expected: (function, array)\\n Actual: (${typeof callback}, ${typeof array})`;\r\n    }\r\n    \r\n  },\r\n\r\n  average: function(arr) {\r\n    const summedArray =  arr.reduce((acc, current) => acc + current, 0);\r\n    const result = summedArray / arr.length;\r\n    return result;\r\n  },\r\n\r\n  cond: function(...args) {\r\n    for (let i = 0; i < args.length; i++) {\r\n      if (i % 2 === 0) {\r\n        if (i === args.length - 1 && (typeof args[i] === 'function')) {\r\n          return args[i]();\r\n        } \r\n        else if (i === args.length - 1) {\r\n          return args[i];\r\n        }\r\n        else if (args[i] && (typeof args[i + 1] === 'function')) {\r\n          return args[i + 1]();\r\n        } \r\n        else if (args[i]) {\r\n          return args[i + 1];\r\n        } \r\n      }\r\n    }\r\n  },\r\n\r\n  digit: function(char) {\r\n    const digits = [0,1,2,3,4,5,6,7,8,9];\r\n    const isDigit = digits.includes(char);\r\n    return isDigit;\r\n  },\r\n\r\n  drop: function(num, item) {\r\n      if (typeof num === 'number' && (typeof item === 'string' || Array.isArray(item))) {\r\n        return item.slice(num)\r\n      }\r\n      else {\r\n          throw new TypeError(`Expected: (number, (string or array))\\n Actual: (${typeof num}, ${typeof item})`)\r\n      }\r\n  },\r\n\r\n  empty: function(item) {\r\n    const isEmpty = item.length === 0\r\n    if (typeof item === 'string' || Array.isArray(item)) {\r\n      return isEmpty;\r\n    }\r\n    else if (typeof item === 'object') {\r\n      for (prop in item) {\r\n        if (item.hasOwnProperty(prop)) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    else {\r\n      throw new TypeError(`Expected a string, array, or object.\\n Actual: ${typeof item}`);\r\n    }\r\n  },\r\n\r\n  even: function(num) {\r\n    if (typeof num === 'number') {\r\n      return num % 2 === 0;\r\n    }\r\n    else if (Array.isArray(num)) {\r\n      throw new TypeError('Expected: number.\\n Actual: array');\r\n    }\r\n    else {\r\n      throw new TypeError(`Expected: number.\\n Actual: ${typeof num}`);\r\n    }\r\n  },\r\n\r\n  flattenAll: function(...arrays) {\r\n    let levelArray = [];\r\n    for (let i = 0; i < arrays.length; i++) {\r\n        if(!Array.isArray(arrays[i])) {\r\n            levelArray.push(arrays[i]);\r\n            continue;\r\n        }\r\n        let newArray = arrays[i].flat(Infinity);\r\n        levelArray.push(newArray);\r\n    }\r\n    let flatArray = levelArray.flat();\r\n    return flatArray;\r\n  },\r\n\r\n  freeze: function(item) {\r\n    if (item === null) {\r\n      throw new TypeError('Expected: object or array.\\n Cannot freeze null value');\r\n    }\r\n    else if (typeof item === 'object' || Array.isArray(item)) {\r\n      Object.freeze(item);\r\n\r\n      Object.getOwnPropertyNames(item).forEach(prop => {\r\n        if (item.hasOwnProperty(prop)\r\n        && item[prop] !== null\r\n        && (typeof item[prop] === \"object\" || typeof item[prop] === \"function\")\r\n        && !Object.isFrozen(item[prop])) {\r\n          Object.freeze(item[prop]);\r\n        }\r\n      });\r\n      \r\n      return item;\r\n    }\r\n    else {\r\n      throw new TypeError(`Can only freeze objects.\\n Expected: 'object'\\n Actual ${typeof item}`);\r\n    }\r\n  },\r\n\r\n  frozen: function(item) {\r\n    if (typeof item === 'object') {\r\n      return Object.isFrozen(item);\r\n    }\r\n    else {\r\n      throw new TypeError(`Expected: object or array\\n Actual: ${typeof item}`)\r\n    }\r\n  },\r\n\r\n  head: function(item) {\r\n      if ((typeof item === 'string' || Array.isArray(item)) && item !== '' && item !== []) {\r\n        return item[0]\r\n      }\r\n      else if ((typeof item === 'string' || Array.isArray(item)) && (item === '' || item === [])) {\r\n          throw new Error(`Empty input:\\nCannot retrieve head of empty string or array`);\r\n      }\r\n      else {\r\n          throw new TypeError(`Expected: string or array\\n Actual: ${typeof item}`);\r\n      }\r\n  },\r\n\r\n  ifThen: function(cond, callback) {\r\n    if (cond && (typeof callback === 'function')) {\r\n      return callback();\r\n    } else if (cond) {\r\n      return callback;\r\n    } else {\r\n      return null;\r\n    }\r\n  },\r\n\r\n  ifThenElse: function(cond, callback, elseCallback) {\r\n    if (cond && (typeof callback === 'function')) {\r\n      return callback();\r\n    } else if (cond) {\r\n      return callback;\r\n    } else if (!cond && (typeof elseCallback === 'function')) {\r\n        return elseCallback();\r\n    } else {\r\n      return elseCallback;\r\n    }\r\n  },\r\n\r\n  init: function(item) {\r\n    if ((typeof item === 'string' || Array.isArray(item)) && item !== '' && item !== []) {\r\n      return item.slice(0, item.length - 1);\r\n    }\r\n    else if ((typeof item === 'string' || Array.isArray(item)) && (item === '' || item === [])) {\r\n        throw new Error(`Empty input:\\nCannot retrieve init of empty string or array`);\r\n    }\r\n    else {\r\n        throw new TypeError(`Expected: string or array\\n Actual: ${typeof item}`);\r\n    }\r\n  },\r\n\r\n  input: function(prompt) {\r\n    const userInput = readlineSync.question(prompt);\r\n    return userInput;\r\n  },\r\n\r\n  integer: function(item) {\r\n    return Number.isInteger(item);\r\n  },\r\n\r\n  is: function(item) {\r\n    return item;\r\n  },\r\n\r\n  last: function(item) {\r\n    if ((typeof item === 'string' || Array.isArray(item)) && item !== '' && item !== []) {\r\n      return item[item.length - 1];\r\n    }\r\n    else if ((typeof item === 'string' || Array.isArray(item)) && (item === '' || item === [])) {\r\n        throw new Error(`Empty input:\\nCannot retrieve last of empty string or array`);\r\n    }\r\n    else {\r\n        throw new TypeError(`Expected: string or array\\n Actual: ${typeof item}`);\r\n    }\r\n    },\r\n\r\n  nil: function(item) {\r\n    const isNil = item === null || item === undefined;\r\n    return isNil;\r\n  },\r\n\r\n  not: function(bool) {\r\n    if (typeof bool === 'boolean') {\r\n      return !bool;\r\n    }\r\n    else {\r\n      throw new TypeError(`Expected: boolean\\n Actual: ${typeof bool}`);\r\n    }\r\n  },\r\n\r\n  number: function(item) {\r\n    const isNumber = typeof item === 'number' && !isNaN(item);\r\n    return isNumber;\r\n  },\r\n\r\n  odd: function(num) {\r\n    if (typeof num === 'number') {\r\n      return num % 2 !== 0;\r\n    }\r\n    else if (Array.isArray(num)) {\r\n      throw new TypeError('Expected: number.\\n Actual: array');\r\n    }\r\n    else {\r\n      throw new TypeError(`Expected: number.\\n Actual: ${typeof num}`);\r\n    }\r\n  },\r\n\r\n  onlyDigits: function (string) {\r\n    if (typeof string === 'string') {\r\n      let digitsOnly = string.replace(/[^\\d]/g, '');\r\n      return digitsOnly;\r\n    }\r\n    else if (Array.isArray(string)) {\r\n      throw new TypeError('Expected: number.\\n Actual: array');\r\n    }\r\n    else {\r\n      throw new TypeError(`@onlyDigits\\nExpected: string\\n Actual: ${typeof string}`);\r\n    }\r\n  },\r\n\r\n  onlyLetters: function (string) {\r\n    if (typeof string === 'string') {\r\n      let newString = string.replace(/[^a-zA-z]/g, '');\r\n      return newString;\r\n    }\r\n    else if (Array.isArray(string)) {\r\n      throw new TypeError('Expected: number.\\n Actual: array');\r\n    }\r\n    else {\r\n      throw new TypeError(`@onlyLetters\\nExpected: string\\n Actual: ${typeof string}`);\r\n    }\r\n  },\r\n\r\n  print: function(item) {\r\n    console.log(item);\r\n  },\r\n  \r\n  randomInt: function(min, max) {\r\n    if (typeof min === 'number' && typeof max === 'number') {\r\n      return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n    else {\r\n      throw new TypeError(`Expected: (number, number)\\n Actual: (${typeof min}, ${typeof max})`);\r\n    }\r\n  },\r\n\r\n  randomChoice: function(array) {\r\n    if (Array.isArray(array)) {\r\n      let chosenInt = Math.floor(Math.random() * array.length);\r\n      return array[chosenInt];\r\n    }\r\n    else {\r\n      throw new TypeError(`Expected array:\\n Actual: ${typeof array}`);\r\n    }\r\n  },\r\n\r\n  range: function(firstNumber, secondNumber) {\r\n    if (typeof firstNumber !== 'number' || typeof secondNumber !== 'number') {\r\n      throw new TypeError(`Expected: (number, number)\\n Actual: (${typeof firstNumber}, ${typeof secondNumber})`);\r\n    }\r\n \r\n    if (firstNumber < 0 && secondNumber === undefined) {\r\n      secondNumber = 0;\r\n      return makeArray(firstNumber, secondNumber);\r\n    } \r\n    \r\n    else if (secondNumber === undefined) {\r\n      secondNumber = firstNumber;\r\n      firstNumber = 0;\r\n      return makeArray(firstNumber, secondNumber);\r\n    } \r\n    \r\n    else if (firstNumber <= secondNumber) {\r\n      return makeArray(firstNumber, secondNumber);\r\n    } \r\n    \r\n    else if (firstNumber >= secondNumber) {\r\n      return makeReverseArray(firstNumber, secondNumber);\r\n    }\r\n\r\n    return rangeArray;\r\n  },\r\n\r\n\r\n  reverse: function(item) {\r\n    if (Array.isArray(item)) {\r\n      return item.reverse();\r\n    } \r\n    else if (typeof item === 'string') {\r\n      let newWord = item.split('').reverse().join('');\r\n      return newWord;\r\n    }\r\n    else {\r\n      throw new TypeError(`Expected: string or array\\n Actual: ${typeof item}`);\r\n    }\r\n  },\r\n\r\n\r\n  seal: function(item) {\r\n    if (item === null) {\r\n      throw new TypeError('Expected: object or array.\\n Cannot seal null value');\r\n    }\r\n    else if (typeof item === 'object' || Array.isArray(item)) {\r\n      return Object.seal(item);\r\n    }\r\n    else {\r\n      throw new TypeError(`Can only seal objects.\\n Expected: 'object'\\n Actual ${typeof item}`);\r\n    }\r\n  },\r\n\r\n  shuffle: function(array) {\r\n    if (Array.isArray(array)) {\r\n      for (let i = array.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n      }\r\n    return array;\r\n    }\r\n    else {\r\n      throw new TypeError(`Expected: array\\n Actual: ${typeof array}`);\r\n    }\r\n  },\r\n\r\n  splitEvery: function(num, array) {\r\n      if (typeof num === 'number' && Array.isArray(array)) {\r\n        let splitArray = []\r\n        let currentArray = []\r\n        for (let i = 1; i < array.length + 1; i++) {\r\n          currentArray.push(array[i - 1])\r\n          if (i % num === 0) {\r\n              splitArray.push(currentArray)\r\n              currentArray = []\r\n          } \r\n          else if (i === array.length) {\r\n              splitArray.push(currentArray)\r\n          }\r\n        }\r\n        return splitArray\r\n      }\r\n      else if (Array.isArray(num), Array.isArray(array)){\r\n          return `Expected: (number, array)\\n Actual: (array, array)`\r\n      }\r\n      else if (!Array.isArray(num), Array.isArray(array)) {\r\n        return `Expected: (number, array)\\n Actual: (${typeof num}, array)`\r\n      }\r\n      else {\r\n        return `Expected: (number, array)\\n Actual: (${typeof num}, ${typeof array})`\r\n      }\r\n  },\r\n\r\n  sum: function(...numbers) {\r\n    let numbersFlattened = numbers.reduce((accumulator, currentValue) => accumulator.concat(currentValue), []);\r\n\r\n    let numbersToBeSummed = numbersFlattened.map((item) => Number(item));\r\n\r\n    let sum = numbersToBeSummed.reduce((accumulator, currentValue) => accumulator + currentValue);\r\n    return sum;\r\n  },\r\n\r\n  tail: function(item) {\r\n    if ((typeof item === 'string' || Array.isArray(item)) && item !== '' && item !== []) {\r\n      return item.slice(1, item.length);\r\n    }\r\n    else if ((typeof item === 'string' || Array.isArray(item)) && (item === '' || item === [])) {\r\n        throw new Error(`Empty input:\\nCannot retrieve init of empty string or array`);\r\n    }\r\n    else {\r\n        throw new TypeError(`Expected: string or array\\n Actual: ${typeof item}`);\r\n    }\r\n  },\r\n\r\n  take: function(number, item) {\r\n      const result = item.slice(0, number);\r\n      return result;\r\n  },\r\n\r\n  unique: function(arr) {\r\n    if (Array.isArray(arr)) {\r\n      let uniques = [];\r\n      for (let item of arr) {\r\n        if(uniques.indexOf(item) === -1) {\r\n          uniques.push(item);\r\n        }\r\n      }\r\n      return uniques;\r\n    }\r\n    else {\r\n      throw new TypeError(`Expected: array\\n Actual: ${arr}`);\r\n    }\r\n  },\r\n}\r\n\r\n\r\n\r\n// Helper functions\r\n\r\n// Range helper -------------------------------------------------------------------------------\r\nfunction makeArray (firstNumber, secondNumber) {\r\n  let rangeArray = [];\r\n  for (let i = firstNumber; i <= secondNumber; i++) {\r\n      rangeArray.push(i);\r\n  }   \r\n  return rangeArray;\r\n}\r\n\r\nfunction makeReverseArray(firstNumber, secondNumber) {\r\n  let rangeArray = [];\r\n  for (let i = firstNumber; i >= secondNumber; i--) {\r\n      rangeArray.push(i);\r\n  }\r\n  return rangeArray;\r\n}\r\n\r\n// ------------------------------------------------------------------------------------------\r\n\r\nmodule.exports = ezRead","function initializeDeck(suits, ranks)\r\n{\r\n    const deck = [];\r\n    \r\n    suits.forEach(suit => \r\n    {\r\n        ranks.forEach(rank => \r\n        {\r\n            deck.push(`${rank}${suit}`);\r\n        });\r\n    });\r\n\r\n    return deck;\r\n}\r\n\r\nmodule.exports = initializeDeck;","const { freeze, drop, take, shuffle } = require('ez-read');\r\nconst initializeDeck = require('./deck-init');\r\n\r\n\r\nclass Deck {\r\n    constructor() \r\n    {\r\n    this.suits = freeze(['S', 'H', 'D', 'C']);\r\n    this.ranks = freeze(['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']);\r\n    this.deck = shuffle(initializeDeck(this.suits, this.ranks));\r\n    }\r\n\r\n    show()\r\n    {\r\n        console.log(this.deck);\r\n    }\r\n\r\n    shuffleDeck()\r\n    { \r\n        this.deck = shuffle(this.deck)\r\n    }\r\n\r\n    discard(num)\r\n    {   \r\n        this.deck = drop(num, this.deck);\r\n    }\r\n\r\n    deal(num)\r\n    {\r\n        const hand = take(num, this.deck);\r\n        this.deck = drop(num, this.deck);\r\n        return hand;\r\n    }\r\n\r\n    reset()\r\n    {\r\n        this.deck = shuffle(initializeDeck(this.suits, this.ranks));\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = Deck;","import Deck from 'classic-deck';\r\n\r\n\r\nconst deck = new Deck;\r\n\r\nconst cardDeck = document.querySelector('.card-deck');\r\nconst cardImages = require('../images/*.png');\r\nconst choiceButtons = document.querySelector('.choice-buttons');\r\nconst choiceButtonContainer = document.querySelector('.choice-button-container');\r\nconst compCards = document.querySelector('.comp-cards');\r\nconst compMessage = document.querySelector('.comp-message');\r\nconst compScoreDisplay = document.querySelector('.comp-score-display');\r\nconst deckRemaining = document.querySelector('.deck-remaining');\r\nconst displayHand = document.querySelector('.player-cards');\r\nconst newGameButton = document.querySelector('.new-game');\r\nconst setsFound = document.querySelector('.sets-found');\r\nconst userResponse = document.querySelector('.user-response');\r\nconst userScoreDisplay = document.querySelector('.user-score-display');\r\n\r\n\r\n\r\nexport { \r\n    cardDeck,\r\n    cardImages,\r\n    choiceButtons, \r\n    choiceButtonContainer, \r\n    compCards,\r\n    compMessage, \r\n    compScoreDisplay,\r\n    deck, \r\n    deckRemaining, \r\n    displayHand, \r\n    newGameButton,\r\n    setsFound,\r\n    userResponse,\r\n    userScoreDisplay,\r\n}","function clearCards(cardDisplay)\r\n{\r\n    cardDisplay.innerHTML = '';\r\n}\r\n\r\n\r\n\r\nfunction appendNewCard(imgSrc, cardDisplay)\r\n{\r\n    const newCard = document.createElement('img');\r\n    newCard.setAttribute('src', imgSrc);\r\n    newCard.setAttribute('height', '150px');\r\n    newCard.setAttribute('width', '100px');\r\n    newCard.style.padding = \"10px 5px 10px 5px\";\r\n    cardDisplay.appendChild(newCard);\r\n}\r\n\r\n\r\nfunction getRankWord(cardRank)\r\n{\r\n    switch(cardRank)\r\n    {\r\n        case 'J':\r\n            return 'jack';\r\n        case 'Q':\r\n            return 'queen';\r\n        case 'K':\r\n            return 'king';\r\n        case 'A':\r\n            return 'ace';\r\n        default:\r\n            return cardRank;\r\n    }\r\n}\r\n\r\n\r\nexport { clearCards, appendNewCard, getRankWord };","import { init, last } from 'ez-read';\r\nimport { cardImages, displayHand } from './model/model';\r\nimport { clearCards, appendNewCard, getRankWord } from './display-util';\r\nimport user from './model/user';\r\n\r\n\r\nfunction updateUserDisplay()\r\n{\r\n    clearCards(displayHand)\r\n    user.hand.forEach(card =>\r\n    {\r\n        const imgSrc = buildSrc(card);\r\n        appendNewCard(imgSrc, displayHand);\r\n    });\r\n}\r\n\r\n\r\nfunction buildSrc(card)\r\n{\r\n    const cardRank = init(card);\r\n    const rankWord = getRankWord(cardRank);\r\n    const cardSuit = last(card);\r\n    const suitWord = getSuitWord(cardSuit);\r\n    const imgSrc = cardImages[`${rankWord}_of_${suitWord}`];\r\n    return imgSrc;\r\n}\r\n\r\n\r\nfunction getSuitWord(cardSuit)\r\n{\r\n    switch(cardSuit)\r\n    {\r\n        case 'S':\r\n            return 'spades';\r\n        case 'H':\r\n            return 'hearts';\r\n        case 'D':\r\n            return 'diamonds';\r\n        case 'C':\r\n            return 'clubs';\r\n        default:\r\n            return 'broken';\r\n    }\r\n}\r\n\r\n\r\nexport default updateUserDisplay;","import updateUserDisplay from '../update-user-display';\r\nimport { userScoreDisplay } from './model';\r\n\r\n\r\nconst user = {\r\n    hand: [],\r\n    score: 0,\r\n    updateScore: updateUserScore,\r\n    updateCards: updateUserDisplay,\r\n}\r\n\r\n\r\n\r\nfunction updateUserScore()\r\n{\r\n    userScoreDisplay.innerHTML = `You: ${user.score}`;\r\n}\r\n\r\n\r\nexport default user;","import { compCards, cardImages } from './model/model';\r\nimport { clearCards, appendNewCard } from './display-util';\r\nimport  comp  from './model/comp';\r\n\r\nfunction updateCompDisplay()\r\n{\r\n    clearCards(compCards);\r\n    comp.hand.forEach(_ =>\r\n    {\r\n            const imgSrc = cardImages.back;\r\n            appendNewCard(imgSrc, compCards);\r\n    });\r\n}\r\n\r\n\r\nexport default updateCompDisplay;","import updateCompDisplay  from '../update-comp-display';\r\nimport { compMessage, compScoreDisplay } from './model';\r\n\r\nconst comp = {\r\n    guessOptions: [2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K', 'A'],\r\n    updatedOptions: [2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K', 'A'],\r\n    guess: '',\r\n    hand: [],\r\n    message: compMessage,\r\n    updateCards: updateCompDisplay,\r\n    updateScore: updateScoreDisplay,\r\n    resetGuessOptions: resetGuessOpts,\r\n    score: 0,\r\n}\r\n\r\n\r\nfunction updateScoreDisplay()\r\n{\r\n    compScoreDisplay.innerHTML = `Computer: ${comp.score}`;\r\n}\r\n\r\n\r\nfunction resetGuessOpts()\r\n{\r\n    comp.guessOptions = comp.updatedOptions;\r\n}\r\n\r\nexport default comp;","import { init, unique } from 'ez-read';\r\nimport { setsFound } from './model/model';\r\nimport { getRankWord } from './display-util';\r\nimport comp from './model/comp';\r\n\r\n\r\nfunction takeOutSets(player)\r\n{\r\n    const ranks = player.hand.map(card => init(card));\r\n    const uniqueRanks = unique(ranks);\r\n    const setFoundRank = findSets(uniqueRanks, player);\r\n    if (setFoundRank)\r\n    {\r\n        player.hand = player.hand.filter(card => setFoundRank !== init(card));\r\n        comp.updatedOptions = comp.updatedOptions.filter(rank => rank != setFoundRank);\r\n        player.updateCards();\r\n        player.score++;\r\n        player.updateScore();\r\n        const currentSets = setsFound.innerHTML;\r\n        const newSetsFound = `${currentSets} ${getRankWord(setFoundRank)}s, `;\r\n        setsFound.innerHTML = newSetsFound;\r\n    }\r\n}\r\n\r\n\r\nfunction findSets(uniqueRanks, player)\r\n{\r\n    let count = 0;\r\n    for (let i = 0; i < uniqueRanks.length; i++)\r\n    {\r\n        for (let j = 0; j < player.hand.length; j++)\r\n        {\r\n            if (uniqueRanks[i] === init(player.hand[j]))\r\n            {\r\n                count++;\r\n            }\r\n        }\r\n        if (count === 4)\r\n        {\r\n            return uniqueRanks[i];\r\n        }\r\n        else\r\n        {\r\n            count = 0;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default takeOutSets;","import { cardDeck, cardImages, deck } from './model/model';\r\n\r\n\r\nfunction setDeckDisplay()\r\n{\r\n    switch(deck.deck.length)\r\n    {\r\n        case 38:\r\n            setImage(cardImages['card-deck'], '150px', '155px');\r\n            break;\r\n        case 4:\r\n            setImage(cardImages['card-deck-4'], '150px', '153px');\r\n            break;\r\n        case 3:\r\n            setImage(cardImages['card-deck-3'], '150px', '151px');\r\n            break;\r\n        case 2:\r\n            setImage(cardImages['card-deck-2'], '150px', '149px');\r\n            break;\r\n        case 1:\r\n            setImage(cardImages['card-deck-1'], '150px', '147px');\r\n            break;\r\n        default:\r\n            return;\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction setImage(imgSrc, height, width)\r\n{\r\n    cardDeck.setAttribute('src', imgSrc)\r\n    cardDeck.setAttribute('height', height);\r\n    cardDeck.setAttribute('width', width);\r\n}\r\n\r\n\r\nexport default setDeckDisplay;","import { init } from 'ez-read';\r\nimport { getRankWord } from './display-util';\r\nimport comp from './model/comp';\r\nimport user from './model/user';\r\n\r\n\r\nfunction correctUserGuess(userGuess, cardsFound)\r\n{\r\n\r\n    comp.message.innerHTML = makeCardMessage(userGuess, cardsFound);\r\n    user.hand = user.hand.concat(cardsFound).sort();\r\n    comp.updateCards();\r\n    user.updateCards();\r\n}\r\n\r\n\r\nfunction makeCardMessage(userGuess, cardsFound)\r\n{\r\n    let message = `I have ${numToWord(cardsFound.length)} ${getRankWord(userGuess)}s`;\r\n    if (cardsFound.length === 1)\r\n    {\r\n        message = init(message);\r\n    }\r\n    return message;\r\n}\r\n\r\n\r\nfunction numToWord(num)\r\n{\r\n    switch(num)\r\n    {\r\n        case 1:\r\n            return 'one'\r\n        case 2:\r\n            return 'two'\r\n        case 3:\r\n            return 'three'\r\n        case 4:\r\n            return 'four'\r\n        default:\r\n            return 'error in game...'\r\n    }\r\n}\r\n\r\n\r\nexport default correctUserGuess;","import user from './model/user';\r\nimport comp from './model/comp';\r\nimport { choiceButtonContainer, deck, deckRemaining, setsFound, userResponse } from './model/model';\r\n\r\n\r\nfunction dealCards(deck)\r\n{\r\n    deck.reset()\r\n    user.hand = deck.deal(7);\r\n    comp.hand = deck.deal(7);\r\n}\r\n\r\n\r\nfunction setInitialDisplay()\r\n{\r\n    deckRemaining.innerHTML = `Number of cards remaining: ${deck.deck.length}`;\r\n    user.updateCards();\r\n    choiceButtonContainer.classList.add('is-visible');\r\n    userResponse.classList.remove('is-visible');\r\n    setDeckDisplay()\r\n    comp.score = 0;\r\n    user.score = 0;\r\n    user.updateScore()\r\n    comp.updateScore()\r\n    comp.message.innerHTML = `Your Turn.`;\r\n    setsFound.innerHTML = `Sets Found:`;\r\n}\r\n\r\n\r\nexport {\r\n    dealCards,\r\n    setInitialDisplay,\r\n}","import { any, empty, head, init, not, randomChoice } from 'ez-read'\r\nimport user from './model/user';\r\nimport comp from './model/comp';\r\nimport takeOutSets from './take-out-sets';\r\nimport setDeckDisplay from './set-deck-display';\r\nimport correctUserGuess from './correct-user-guess';\r\nimport { getRankWord } from './display-util';\r\nimport { dealCards, setInitialDisplay } from './init-game';\r\nimport { \r\n    choiceButtons, \r\n    choiceButtonContainer, \r\n    deck, \r\n    deckRemaining, \r\n    newGameButton, \r\n    userResponse,\r\n} from './model/model';\r\n\r\n\r\n\r\nnewGameButton.addEventListener('click', runGame);\r\nchoiceButtons.addEventListener('click', processUserGuess);\r\nuserResponse.addEventListener('click', processResponse);\r\n\r\n\r\nfunction runGame()\r\n{\r\n    dealCards(deck);\r\n    setInitialDisplay()\r\n}\r\n\r\n\r\n\r\nfunction processUserGuess(event)\r\n{\r\n    const userGuess = getUserGuess(event.target.id);\r\n    const newCompHand = comp.hand.filter(card => userGuess !== init(card));\r\n    const cardsFound = comp.hand.filter(card => userGuess === init(card));\r\n    comp.hand = newCompHand;\r\n    if (empty(cardsFound) || empty(comp.hand))\r\n    {\r\n        userGoesFish(event.target.id)\r\n        takeOutSets(user)\r\n        setTimeout(() => {\r\n            runCompTurn()\r\n        }, 1500);\r\n    }\r\n    else\r\n    {\r\n        correctUserGuess(userGuess, cardsFound)\r\n        takeOutSets(user)\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction getUserGuess(eventId)\r\n{\r\n    let userGuess = init(eventId);\r\n    const isFaceCardOrAce = userGuess.length > 2;\r\n    if (isFaceCardOrAce)\r\n    {\r\n        userGuess = head(userGuess.toUpperCase());\r\n    }\r\n\r\n    return userGuess;\r\n}\r\n\r\n\r\n\r\nfunction userGoesFish(eventId)\r\n{\r\n    user.hand = user.hand.concat(deck.deal(1)).sort();\r\n    deckRemaining.innerHTML = `Number of cards remaining: ${deck.deck.length}`;\r\n    choiceButtonContainer.classList.remove('is-visible');\r\n    if (empty(deck.deck))\r\n    {\r\n        gameOver()\r\n        return;\r\n    }\r\n    comp.message.innerHTML = `No ${init(eventId)}s found, Go Fish!`;\r\n    comp.updateCards();\r\n    user.updateCards();\r\n    setDeckDisplay()\r\n}\r\n\r\n\r\n\r\nfunction compGoesFish()\r\n{\r\n    comp.hand = comp.hand.concat(deck.deal(1));\r\n    deckRemaining.innerHTML = `Number of cards remaining: ${deck.deck.length}`;\r\n    userResponse.classList.remove('is-visible');\r\n    if (empty(deck.deck))\r\n    {\r\n        gameOver()\r\n        return;\r\n    }\r\n    comp.updateCards();\r\n    choiceButtonContainer.classList.add('is-visible');\r\n    comp.message.innerHTML = `Your Turn.`;\r\n    takeOutSets(comp)\r\n    comp.resetGuessOptions();\r\n    setDeckDisplay()\r\n}\r\n\r\n\r\nfunction gameOver()\r\n{\r\n    choiceButtonContainer.classList.remove('is-visible');\r\n    userResponse.classList.remove('is-visible');\r\n\r\n    if (user.score > comp.score)\r\n    {\r\n        comp.message.innerHTML = `You Win!`;\r\n    }\r\n    else if (user.score === comp.score)\r\n    {\r\n        comp.message.innerHTML = `Tie Game!`;\r\n    }\r\n    else\r\n    {\r\n        comp.message.innerHTML = `Sorry, you Lose :(`;\r\n    }\r\n}\r\n\r\n\r\nfunction processResponse(event)\r\n{\r\n    const userHasCard = any((item => init(item) == comp.guess), user.hand);\r\n    const buttonPressed = event.target.id;\r\n    switch(true)\r\n    {\r\n        case userHasCard && buttonPressed === 'yes':\r\n            correctCompGuess()\r\n            break;\r\n        case userHasCard && buttonPressed === 'no':\r\n            comp.message.innerHTML = `HEY. NO CHEATING! ... try clicking \"Yes\"...`;\r\n            break;\r\n        case not(userHasCard) && buttonPressed === 'yes':\r\n            comp.message.innerHTML = `HEY. NO CHEATING! ... try clicking \"No, Go Fish!\"...`;\r\n            break;\r\n        case not(userHasCard) && buttonPressed === 'no':\r\n            compGoesFish()\r\n            break;\r\n        default:\r\n            console.log('error');\r\n            \r\n    }\r\n}\r\n\r\n\r\n\r\nfunction runCompTurn()\r\n{\r\n    comp.guess = randomChoice(comp.guessOptions);\r\n    comp.message.innerHTML = `Computer: Do you have any ${getRankWord(comp.guess)}s?`\r\n    userResponse.classList.add('is-visible');\r\n}\r\n\r\n\r\n\r\n\r\nfunction correctCompGuess()\r\n{\r\n    const newUserHand = user.hand.filter(card => comp.guess != init(card));\r\n    const cardsFound = user.hand.filter(card => comp.guess == init(card));\r\n    user.hand = newUserHand;\r\n    comp.hand = comp.hand.concat(cardsFound);\r\n    comp.updateCards();\r\n    user.updateCards();\r\n    comp.guessOptions = comp.guessOptions.filter(rank => comp.guess !== rank);\r\n    takeOutSets(comp)\r\n    setTimeout(() =>\r\n    {\r\n        runCompTurn()\r\n    }, 1500);\r\n}\r\n\r\n\r\n"]}